/** @file STM32_pwm_lib.h
 *  @brief Library layer function declarations for the STM32L4.
 *
 *  Provides a layer of abstraction. Aim is to make the application portable,
 *  and separating the vendor dependence. The library layer wraps around the
 *  vendor specific driver layer.
 *
 *  @author Mark Bilginer (GitHub: MarkBilginer)
 *  @bug No known bugs.
 */

#ifndef INC_STM32_PWM_LIB_H_
#define INC_STM32_PWM_LIB_H_

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "stm32l4xx_hal.h"

/* Exported functions prototypes ---------------------------------------------*/

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/** @brief Converts string to a number.
 *  @param str string that consists of digit characters.
 *  @return conversion result.
 */
int str_to_int(char* str);

/** @brief Calculates the length of a string.
 *  @param p string whose length will be calculated
 *  @return length of string
 */
unsigned int strlength(char *p);

/** @brief Helper function to ease printing using Uart.
 *  @param msg message to be printed.
 *  @return None
 */
void print_message(char msg[]);

/** @brief Converts duty cycle into pulse width.
 *  @param duty_percent duty cycle to be converted
 *  @return pulse width
 */
uint32_t calculate_pulse_width(uint8_t duty_percent);

/** @brief Getter for duty cycle
 *  @param None
 *  @return uint8_t duty cycle
 */
uint8_t get_duty_cycle_int();

/** @brief Prints user input prompt for duty cycle/ power of LED
 *
 *  In addition, Informs the user regarding the correct input format.
 *
 *  @param None
 *  @return None
 */
void print_duty_cycle_prompt();

/** @brief REceives duty cycle of PWM which will power the LED.
 *  @param None
 *  @return 1 when correct user input, 0 when user input is in wrong format.
 */
int receive_duty_cycle();

/** @brief Verifies LED user input and prints user choice.
 *  @param None
 *  @return None
 */
uint8_t check_led_input();

/** @brief Prints the power emitted by the LED
 *  @param None
 *  @return 0 on failure, 1 on success.
 */
uint8_t receive_led_input();


void print_led_prompt();

/** @brief Prints the credentials of author.
 *  @param None
 *  @return None
 */
void credential_print();

/** @brief Quick way to print carriage and new line characters.
 *  @param None
 *  @return None
 */
void carriage_newline_print();

/** @brief Prints the power emitted by the LED
 *  @param None
 *  @return None
 */
void print_led_percentage();

/** @brief Sets the power emitted by the LED.
 *  @param None
 *  @return None
 */
void dim_chosen_led();

/** @brief Prints users Led selection.
 *  @param n_led None
 *  @return None
 */
void print_led_choice();

/** @brief System Clock Configuration
 *  @return None
 */
void config_system_clock(void);

/** @brief Changes the pulse width generated by Tim1.
 *  @param pulse_width
 *  @return None
 */
void adjust_tim1_pulse_width(uint32_t pulse_width);

/** @brief Changes the pulse width generated by Tim2.
 *  @param pulse_width
 *  @return None
 */
void adjust_tim2_pulse_width(uint32_t pulse_width);

/** @brief TIM1 Initialization Function
 *  @param prescaler
 *  @param period
 *  @param pulse
 *  @return None
 */
void init_tim1(uint32_t prescaler, uint32_t period, uint32_t pulse);

/** @brief TIM2 Initialization Function
 *  @param prescaler
 *  @param period
 *  @param pulse
 *  @return None
 */
void init_tim2(uint32_t prescaler, uint32_t period, uint32_t pulse);

/** @brief USART2 Initialization Function
 *  @param baudrate
 *  @return None
 */
void init_usart2_uart(uint32_t baudrate);

/** @brief GPIO Initialization Function
  * @param None
  * @reurn None
  */
void init_gpio(void);

void complement_tim_pwm_start();

void tim_pwm_start();

void init_hal();

/** @brief  This function is executed in case of error occurrence.
 *  @return None
 */
void Error_Handler(void);

/* Private defines -----------------------------------------------------------*/
#define MCO_Pin GPIO_PIN_0
#define MCO_GPIO_Port GPIOA
#define VCP_TX_Pin GPIO_PIN_2
#define VCP_TX_GPIO_Port GPIOA
#define SWDIO_Pin GPIO_PIN_13
#define SWDIO_GPIO_Port GPIOA
#define SWCLK_Pin GPIO_PIN_14
#define SWCLK_GPIO_Port GPIOA
#define VCP_RX_Pin GPIO_PIN_15
#define VCP_RX_GPIO_Port GPIOA

#ifdef __cplusplus
}
#endif

#endif /* INC_STM32_PWM_LIB_H_ */
